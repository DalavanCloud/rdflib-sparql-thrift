#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class RDF_IRI(object):
    """
    Attributes:
     - iri
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'iri', 'UTF8', None, ),  # 1
    )

    def __init__(self, iri=None,):
        self.iri = iri

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.iri = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_IRI')
        if self.iri is not None:
            oprot.writeFieldBegin('iri', TType.STRING, 1)
            oprot.writeString(self.iri.encode('utf-8') if sys.version_info[0] == 2 else self.iri)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.iri is None:
            raise TProtocolException(message='Required field iri is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_PrefixName(object):
    """
    Attributes:
     - prefix
     - localName
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'prefix', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'localName', 'UTF8', None, ),  # 2
    )

    def __init__(self, prefix=None, localName=None,):
        self.prefix = prefix
        self.localName = localName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.prefix = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.localName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_PrefixName')
        if self.prefix is not None:
            oprot.writeFieldBegin('prefix', TType.STRING, 1)
            oprot.writeString(self.prefix.encode('utf-8') if sys.version_info[0] == 2 else self.prefix)
            oprot.writeFieldEnd()
        if self.localName is not None:
            oprot.writeFieldBegin('localName', TType.STRING, 2)
            oprot.writeString(self.localName.encode('utf-8') if sys.version_info[0] == 2 else self.localName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.prefix is None:
            raise TProtocolException(message='Required field prefix is unset!')
        if self.localName is None:
            raise TProtocolException(message='Required field localName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_BNode(object):
    """
    Attributes:
     - label
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'label', 'UTF8', None, ),  # 1
    )

    def __init__(self, label=None,):
        self.label = label

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.label = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_BNode')
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 1)
            oprot.writeString(self.label.encode('utf-8') if sys.version_info[0] == 2 else self.label)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.label is None:
            raise TProtocolException(message='Required field label is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_Literal(object):
    """
    Attributes:
     - lex
     - langtag
     - datatype
     - dtPrefix
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'lex', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'langtag', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'datatype', 'UTF8', None, ),  # 3
        (4, TType.STRUCT, 'dtPrefix', (RDF_PrefixName, RDF_PrefixName.thrift_spec), None, ),  # 4
    )

    def __init__(self, lex=None, langtag=None, datatype=None, dtPrefix=None,):
        self.lex = lex
        self.langtag = langtag
        self.datatype = datatype
        self.dtPrefix = dtPrefix

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.lex = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.langtag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.datatype = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.dtPrefix = RDF_PrefixName()
                    self.dtPrefix.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_Literal')
        if self.lex is not None:
            oprot.writeFieldBegin('lex', TType.STRING, 1)
            oprot.writeString(self.lex.encode('utf-8') if sys.version_info[0] == 2 else self.lex)
            oprot.writeFieldEnd()
        if self.langtag is not None:
            oprot.writeFieldBegin('langtag', TType.STRING, 2)
            oprot.writeString(self.langtag.encode('utf-8') if sys.version_info[0] == 2 else self.langtag)
            oprot.writeFieldEnd()
        if self.datatype is not None:
            oprot.writeFieldBegin('datatype', TType.STRING, 3)
            oprot.writeString(self.datatype.encode('utf-8') if sys.version_info[0] == 2 else self.datatype)
            oprot.writeFieldEnd()
        if self.dtPrefix is not None:
            oprot.writeFieldBegin('dtPrefix', TType.STRUCT, 4)
            self.dtPrefix.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.lex is None:
            raise TProtocolException(message='Required field lex is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_Decimal(object):
    """
    Attributes:
     - value
     - scale
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'value', None, None, ),  # 1
        (2, TType.I32, 'scale', None, None, ),  # 2
    )

    def __init__(self, value=None, scale=None,):
        self.value = value
        self.scale = scale

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.scale = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_Decimal')
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I64, 1)
            oprot.writeI64(self.value)
            oprot.writeFieldEnd()
        if self.scale is not None:
            oprot.writeFieldBegin('scale', TType.I32, 2)
            oprot.writeI32(self.scale)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        if self.scale is None:
            raise TProtocolException(message='Required field scale is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_VAR(object):
    """
    Attributes:
     - name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    )

    def __init__(self, name=None,):
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_VAR')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_ANY(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_ANY')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_UNDEF(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_UNDEF')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_REPEAT(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_REPEAT')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_Term(object):
    """
    Attributes:
     - iri
     - bnode
     - literal
     - prefixName
     - variable
     - any
     - undefined
     - repeat
     - valInteger
     - valDouble
     - valDecimal
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'iri', (RDF_IRI, RDF_IRI.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'bnode', (RDF_BNode, RDF_BNode.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'literal', (RDF_Literal, RDF_Literal.thrift_spec), None, ),  # 3
        (4, TType.STRUCT, 'prefixName', (RDF_PrefixName, RDF_PrefixName.thrift_spec), None, ),  # 4
        (5, TType.STRUCT, 'variable', (RDF_VAR, RDF_VAR.thrift_spec), None, ),  # 5
        (6, TType.STRUCT, 'any', (RDF_ANY, RDF_ANY.thrift_spec), None, ),  # 6
        (7, TType.STRUCT, 'undefined', (RDF_UNDEF, RDF_UNDEF.thrift_spec), None, ),  # 7
        (8, TType.STRUCT, 'repeat', (RDF_REPEAT, RDF_REPEAT.thrift_spec), None, ),  # 8
        None,  # 9
        (10, TType.I64, 'valInteger', None, None, ),  # 10
        (11, TType.DOUBLE, 'valDouble', None, None, ),  # 11
        (12, TType.STRUCT, 'valDecimal', (RDF_Decimal, RDF_Decimal.thrift_spec), None, ),  # 12
    )

    def __init__(self, iri=None, bnode=None, literal=None, prefixName=None, variable=None, any=None, undefined=None, repeat=None, valInteger=None, valDouble=None, valDecimal=None,):
        self.iri = iri
        self.bnode = bnode
        self.literal = literal
        self.prefixName = prefixName
        self.variable = variable
        self.any = any
        self.undefined = undefined
        self.repeat = repeat
        self.valInteger = valInteger
        self.valDouble = valDouble
        self.valDecimal = valDecimal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.iri = RDF_IRI()
                    self.iri.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bnode = RDF_BNode()
                    self.bnode.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.literal = RDF_Literal()
                    self.literal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.prefixName = RDF_PrefixName()
                    self.prefixName.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.variable = RDF_VAR()
                    self.variable.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.any = RDF_ANY()
                    self.any.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.undefined = RDF_UNDEF()
                    self.undefined.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.repeat = RDF_REPEAT()
                    self.repeat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.valInteger = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.valDouble = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.valDecimal = RDF_Decimal()
                    self.valDecimal.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_Term')
        if self.iri is not None:
            oprot.writeFieldBegin('iri', TType.STRUCT, 1)
            self.iri.write(oprot)
            oprot.writeFieldEnd()
        if self.bnode is not None:
            oprot.writeFieldBegin('bnode', TType.STRUCT, 2)
            self.bnode.write(oprot)
            oprot.writeFieldEnd()
        if self.literal is not None:
            oprot.writeFieldBegin('literal', TType.STRUCT, 3)
            self.literal.write(oprot)
            oprot.writeFieldEnd()
        if self.prefixName is not None:
            oprot.writeFieldBegin('prefixName', TType.STRUCT, 4)
            self.prefixName.write(oprot)
            oprot.writeFieldEnd()
        if self.variable is not None:
            oprot.writeFieldBegin('variable', TType.STRUCT, 5)
            self.variable.write(oprot)
            oprot.writeFieldEnd()
        if self.any is not None:
            oprot.writeFieldBegin('any', TType.STRUCT, 6)
            self.any.write(oprot)
            oprot.writeFieldEnd()
        if self.undefined is not None:
            oprot.writeFieldBegin('undefined', TType.STRUCT, 7)
            self.undefined.write(oprot)
            oprot.writeFieldEnd()
        if self.repeat is not None:
            oprot.writeFieldBegin('repeat', TType.STRUCT, 8)
            self.repeat.write(oprot)
            oprot.writeFieldEnd()
        if self.valInteger is not None:
            oprot.writeFieldBegin('valInteger', TType.I64, 10)
            oprot.writeI64(self.valInteger)
            oprot.writeFieldEnd()
        if self.valDouble is not None:
            oprot.writeFieldBegin('valDouble', TType.DOUBLE, 11)
            oprot.writeDouble(self.valDouble)
            oprot.writeFieldEnd()
        if self.valDecimal is not None:
            oprot.writeFieldBegin('valDecimal', TType.STRUCT, 12)
            self.valDecimal.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_Triple(object):
    """
    Attributes:
     - S
     - P
     - O
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'S', (RDF_Term, RDF_Term.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'P', (RDF_Term, RDF_Term.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'O', (RDF_Term, RDF_Term.thrift_spec), None, ),  # 3
    )

    def __init__(self, S=None, P=None, O=None,):
        self.S = S
        self.P = P
        self.O = O

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.S = RDF_Term()
                    self.S.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.P = RDF_Term()
                    self.P.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.O = RDF_Term()
                    self.O.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_Triple')
        if self.S is not None:
            oprot.writeFieldBegin('S', TType.STRUCT, 1)
            self.S.write(oprot)
            oprot.writeFieldEnd()
        if self.P is not None:
            oprot.writeFieldBegin('P', TType.STRUCT, 2)
            self.P.write(oprot)
            oprot.writeFieldEnd()
        if self.O is not None:
            oprot.writeFieldBegin('O', TType.STRUCT, 3)
            self.O.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.S is None:
            raise TProtocolException(message='Required field S is unset!')
        if self.P is None:
            raise TProtocolException(message='Required field P is unset!')
        if self.O is None:
            raise TProtocolException(message='Required field O is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_Quad(object):
    """
    Attributes:
     - S
     - P
     - O
     - G
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'S', (RDF_Term, RDF_Term.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'P', (RDF_Term, RDF_Term.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'O', (RDF_Term, RDF_Term.thrift_spec), None, ),  # 3
        (4, TType.STRUCT, 'G', (RDF_Term, RDF_Term.thrift_spec), None, ),  # 4
    )

    def __init__(self, S=None, P=None, O=None, G=None,):
        self.S = S
        self.P = P
        self.O = O
        self.G = G

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.S = RDF_Term()
                    self.S.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.P = RDF_Term()
                    self.P.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.O = RDF_Term()
                    self.O.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.G = RDF_Term()
                    self.G.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_Quad')
        if self.S is not None:
            oprot.writeFieldBegin('S', TType.STRUCT, 1)
            self.S.write(oprot)
            oprot.writeFieldEnd()
        if self.P is not None:
            oprot.writeFieldBegin('P', TType.STRUCT, 2)
            self.P.write(oprot)
            oprot.writeFieldEnd()
        if self.O is not None:
            oprot.writeFieldBegin('O', TType.STRUCT, 3)
            self.O.write(oprot)
            oprot.writeFieldEnd()
        if self.G is not None:
            oprot.writeFieldBegin('G', TType.STRUCT, 4)
            self.G.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.S is None:
            raise TProtocolException(message='Required field S is unset!')
        if self.P is None:
            raise TProtocolException(message='Required field P is unset!')
        if self.O is None:
            raise TProtocolException(message='Required field O is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_PrefixDecl(object):
    """
    Attributes:
     - prefix
     - uri
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'prefix', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'uri', 'UTF8', None, ),  # 2
    )

    def __init__(self, prefix=None, uri=None,):
        self.prefix = prefix
        self.uri = uri

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.prefix = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.uri = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_PrefixDecl')
        if self.prefix is not None:
            oprot.writeFieldBegin('prefix', TType.STRING, 1)
            oprot.writeString(self.prefix.encode('utf-8') if sys.version_info[0] == 2 else self.prefix)
            oprot.writeFieldEnd()
        if self.uri is not None:
            oprot.writeFieldBegin('uri', TType.STRING, 2)
            oprot.writeString(self.uri.encode('utf-8') if sys.version_info[0] == 2 else self.uri)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.prefix is None:
            raise TProtocolException(message='Required field prefix is unset!')
        if self.uri is None:
            raise TProtocolException(message='Required field uri is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_StreamRow(object):
    """
    Attributes:
     - prefixDecl
     - triple
     - quad
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'prefixDecl', (RDF_PrefixDecl, RDF_PrefixDecl.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'triple', (RDF_Triple, RDF_Triple.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'quad', (RDF_Quad, RDF_Quad.thrift_spec), None, ),  # 3
    )

    def __init__(self, prefixDecl=None, triple=None, quad=None,):
        self.prefixDecl = prefixDecl
        self.triple = triple
        self.quad = quad

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.prefixDecl = RDF_PrefixDecl()
                    self.prefixDecl.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.triple = RDF_Triple()
                    self.triple.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.quad = RDF_Quad()
                    self.quad.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_StreamRow')
        if self.prefixDecl is not None:
            oprot.writeFieldBegin('prefixDecl', TType.STRUCT, 1)
            self.prefixDecl.write(oprot)
            oprot.writeFieldEnd()
        if self.triple is not None:
            oprot.writeFieldBegin('triple', TType.STRUCT, 2)
            self.triple.write(oprot)
            oprot.writeFieldEnd()
        if self.quad is not None:
            oprot.writeFieldBegin('quad', TType.STRUCT, 3)
            self.quad.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_VarTuple(object):
    """
    Attributes:
     - vars
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'vars', (TType.STRUCT, (RDF_VAR, RDF_VAR.thrift_spec), False), None, ),  # 1
    )

    def __init__(self, vars=None,):
        self.vars = vars

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.vars = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = RDF_VAR()
                        _elem5.read(iprot)
                        self.vars.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_VarTuple')
        if self.vars is not None:
            oprot.writeFieldBegin('vars', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.vars))
            for iter6 in self.vars:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RDF_DataTuple(object):
    """
    Attributes:
     - row
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'row', (TType.STRUCT, (RDF_Term, RDF_Term.thrift_spec), False), None, ),  # 1
    )

    def __init__(self, row=None,):
        self.row = row

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.row = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = RDF_Term()
                        _elem12.read(iprot)
                        self.row.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RDF_DataTuple')
        if self.row is not None:
            oprot.writeFieldBegin('row', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.row))
            for iter13 in self.row:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
